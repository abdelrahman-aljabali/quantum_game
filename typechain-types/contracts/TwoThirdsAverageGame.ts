/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TwoThirdsAverageGame {
  export type ResultsStruct = {
    average: BigNumberish;
    twoThirdsAverage: BigNumberish;
    winner: AddressLike;
    prize: BigNumberish;
    serviceFee: BigNumberish;
  };

  export type ResultsStructOutput = [
    average: bigint,
    twoThirdsAverage: bigint,
    winner: string,
    prize: bigint,
    serviceFee: bigint
  ] & {
    average: bigint;
    twoThirdsAverage: bigint;
    winner: string;
    prize: bigint;
    serviceFee: bigint;
  };
}

export interface TwoThirdsAverageGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "autoStartDelay"
      | "average"
      | "commitDuration"
      | "commitGuess"
      | "currentPhase"
      | "entryFee"
      | "finalizeGame"
      | "getPhase"
      | "getPlayerCount"
      | "getPlayers"
      | "getResults"
      | "getTimeRemaining"
      | "joinGame"
      | "leaveGame"
      | "maxPlayers"
      | "minPlayers"
      | "minPlayersReachedTime"
      | "owner"
      | "pendingWithdrawals"
      | "playerAddresses"
      | "players"
      | "prizePool"
      | "renounceOwnership"
      | "revealDuration"
      | "revealGuess"
      | "serviceFeePercent"
      | "transferOwnership"
      | "twoThirdsAverage"
      | "winner"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameEnded"
      | "GameStarting"
      | "GuessCommitted"
      | "GuessRevealed"
      | "OwnershipTransferred"
      | "PlayerJoined"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "autoStartDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "average", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commitDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitGuess",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "entryFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeGame",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPhase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "joinGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "leaveGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPlayersReachedTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "prizePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealGuess",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "twoThirdsAverage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "autoStartDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "average", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPhase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimeRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaveGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minPlayersReachedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prizePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twoThirdsAverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace GameEndedEvent {
  export type InputTuple = [
    average: BigNumberish,
    twoThirdsAverage: BigNumberish,
    winner: AddressLike,
    prize: BigNumberish
  ];
  export type OutputTuple = [
    average: bigint,
    twoThirdsAverage: bigint,
    winner: string,
    prize: bigint
  ];
  export interface OutputObject {
    average: bigint;
    twoThirdsAverage: bigint;
    winner: string;
    prize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartingEvent {
  export type InputTuple = [
    startTime: BigNumberish,
    commitStart: BigNumberish,
    commitEnd: BigNumberish,
    entryFee: BigNumberish,
    minPlayers: BigNumberish,
    maxPlayers: BigNumberish
  ];
  export type OutputTuple = [
    startTime: bigint,
    commitStart: bigint,
    commitEnd: bigint,
    entryFee: bigint,
    minPlayers: bigint,
    maxPlayers: bigint
  ];
  export interface OutputObject {
    startTime: bigint;
    commitStart: bigint;
    commitEnd: bigint;
    entryFee: bigint;
    minPlayers: bigint;
    maxPlayers: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuessCommittedEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuessRevealedEvent {
  export type InputTuple = [player: AddressLike, guess: BigNumberish];
  export type OutputTuple = [player: string, guess: bigint];
  export interface OutputObject {
    player: string;
    guess: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [player: AddressLike, entryFeePaid: BigNumberish];
  export type OutputTuple = [player: string, entryFeePaid: bigint];
  export interface OutputObject {
    player: string;
    entryFeePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TwoThirdsAverageGame extends BaseContract {
  connect(runner?: ContractRunner | null): TwoThirdsAverageGame;
  waitForDeployment(): Promise<this>;

  interface: TwoThirdsAverageGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  autoStartDelay: TypedContractMethod<[], [bigint], "view">;

  average: TypedContractMethod<[], [bigint], "view">;

  commitDuration: TypedContractMethod<[], [bigint], "view">;

  commitGuess: TypedContractMethod<[hash: BytesLike], [void], "nonpayable">;

  currentPhase: TypedContractMethod<[], [bigint], "view">;

  entryFee: TypedContractMethod<[], [bigint], "view">;

  finalizeGame: TypedContractMethod<[], [void], "nonpayable">;

  getPhase: TypedContractMethod<[], [bigint], "view">;

  getPlayerCount: TypedContractMethod<[], [bigint], "view">;

  getPlayers: TypedContractMethod<[], [string[]], "view">;

  getResults: TypedContractMethod<
    [],
    [TwoThirdsAverageGame.ResultsStructOutput],
    "view"
  >;

  getTimeRemaining: TypedContractMethod<[], [bigint], "view">;

  joinGame: TypedContractMethod<[], [void], "payable">;

  leaveGame: TypedContractMethod<[], [void], "nonpayable">;

  maxPlayers: TypedContractMethod<[], [bigint], "view">;

  minPlayers: TypedContractMethod<[], [bigint], "view">;

  minPlayersReachedTime: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingWithdrawals: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  playerAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, boolean, boolean] & {
        commitment: string;
        revealedGuess: bigint;
        hasCommitted: boolean;
        hasRevealed: boolean;
        hasJoined: boolean;
      }
    ],
    "view"
  >;

  prizePool: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revealDuration: TypedContractMethod<[], [bigint], "view">;

  revealGuess: TypedContractMethod<
    [guess: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  serviceFeePercent: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  twoThirdsAverage: TypedContractMethod<[], [bigint], "view">;

  winner: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "autoStartDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "average"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "commitDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "commitGuess"
  ): TypedContractMethod<[hash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentPhase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "entryFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finalizeGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPhase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getResults"
  ): TypedContractMethod<
    [],
    [TwoThirdsAverageGame.ResultsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeRemaining"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "leaveGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minPlayersReachedTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingWithdrawals"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, boolean, boolean] & {
        commitment: string;
        revealedGuess: bigint;
        hasCommitted: boolean;
        hasRevealed: boolean;
        hasJoined: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "prizePool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revealGuess"
  ): TypedContractMethod<
    [guess: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "serviceFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twoThirdsAverage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "winner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarting"
  ): TypedContractEvent<
    GameStartingEvent.InputTuple,
    GameStartingEvent.OutputTuple,
    GameStartingEvent.OutputObject
  >;
  getEvent(
    key: "GuessCommitted"
  ): TypedContractEvent<
    GuessCommittedEvent.InputTuple,
    GuessCommittedEvent.OutputTuple,
    GuessCommittedEvent.OutputObject
  >;
  getEvent(
    key: "GuessRevealed"
  ): TypedContractEvent<
    GuessRevealedEvent.InputTuple,
    GuessRevealedEvent.OutputTuple,
    GuessRevealedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "GameEnded(uint256,uint256,address,uint256)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "GameStarting(uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      GameStartingEvent.InputTuple,
      GameStartingEvent.OutputTuple,
      GameStartingEvent.OutputObject
    >;
    GameStarting: TypedContractEvent<
      GameStartingEvent.InputTuple,
      GameStartingEvent.OutputTuple,
      GameStartingEvent.OutputObject
    >;

    "GuessCommitted(address)": TypedContractEvent<
      GuessCommittedEvent.InputTuple,
      GuessCommittedEvent.OutputTuple,
      GuessCommittedEvent.OutputObject
    >;
    GuessCommitted: TypedContractEvent<
      GuessCommittedEvent.InputTuple,
      GuessCommittedEvent.OutputTuple,
      GuessCommittedEvent.OutputObject
    >;

    "GuessRevealed(address,uint256)": TypedContractEvent<
      GuessRevealedEvent.InputTuple,
      GuessRevealedEvent.OutputTuple,
      GuessRevealedEvent.OutputObject
    >;
    GuessRevealed: TypedContractEvent<
      GuessRevealedEvent.InputTuple,
      GuessRevealedEvent.OutputTuple,
      GuessRevealedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerJoined(address,uint256)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
