/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GameFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createCustomGame"
      | "createGame"
      | "currentGame"
      | "defaultAutoStartDelay"
      | "defaultCommitDuration"
      | "defaultEntryFee"
      | "defaultMaxPlayers"
      | "defaultMinPlayers"
      | "defaultRevealDuration"
      | "defaultServiceFeePercent"
      | "gameExists"
      | "games"
      | "getAllGames"
      | "getCurrentGameContract"
      | "getDefaults"
      | "getGamesCount"
      | "owner"
      | "renounceOwnership"
      | "setCurrentGame"
      | "setDefaultParameters"
      | "transferOwnership"
      | "updateDeployScript"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CurrentGameSet"
      | "DefaultParametersUpdated"
      | "GameCreated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createCustomGame",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAutoStartDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultCommitDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultEntryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMaxPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMinPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultRevealDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultServiceFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameExists",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getAllGames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGameContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGamesCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultParameters",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeployScript",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createCustomGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultAutoStartDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultCommitDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultEntryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMaxPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMinPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultRevealDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultServiceFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGamesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDeployScript",
    data: BytesLike
  ): Result;
}

export namespace CurrentGameSetEvent {
  export type InputTuple = [gameAddress: AddressLike];
  export type OutputTuple = [gameAddress: string];
  export interface OutputObject {
    gameAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultParametersUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [gameAddress: AddressLike, gameId: BigNumberish];
  export type OutputTuple = [gameAddress: string, gameId: bigint];
  export interface OutputObject {
    gameAddress: string;
    gameId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameFactory extends BaseContract {
  connect(runner?: ContractRunner | null): GameFactory;
  waitForDeployment(): Promise<this>;

  interface: GameFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createCustomGame: TypedContractMethod<
    [
      _minPlayers: BigNumberish,
      _maxPlayers: BigNumberish,
      _commitDuration: BigNumberish,
      _revealDuration: BigNumberish,
      _entryFee: BigNumberish,
      _serviceFeePercent: BigNumberish,
      _autoStartDelay: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  createGame: TypedContractMethod<[], [string], "nonpayable">;

  currentGame: TypedContractMethod<[], [string], "view">;

  defaultAutoStartDelay: TypedContractMethod<[], [bigint], "view">;

  defaultCommitDuration: TypedContractMethod<[], [bigint], "view">;

  defaultEntryFee: TypedContractMethod<[], [bigint], "view">;

  defaultMaxPlayers: TypedContractMethod<[], [bigint], "view">;

  defaultMinPlayers: TypedContractMethod<[], [bigint], "view">;

  defaultRevealDuration: TypedContractMethod<[], [bigint], "view">;

  defaultServiceFeePercent: TypedContractMethod<[], [bigint], "view">;

  gameExists: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  games: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getAllGames: TypedContractMethod<[], [string[]], "view">;

  getCurrentGameContract: TypedContractMethod<[], [string], "view">;

  getDefaults: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getGamesCount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCurrentGame: TypedContractMethod<
    [_game: AddressLike],
    [void],
    "nonpayable"
  >;

  setDefaultParameters: TypedContractMethod<
    [
      _minPlayers: BigNumberish,
      _maxPlayers: BigNumberish,
      _commitDuration: BigNumberish,
      _revealDuration: BigNumberish,
      _entryFee: BigNumberish,
      _serviceFeePercent: BigNumberish,
      _autoStartDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDeployScript: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createCustomGame"
  ): TypedContractMethod<
    [
      _minPlayers: BigNumberish,
      _maxPlayers: BigNumberish,
      _commitDuration: BigNumberish,
      _revealDuration: BigNumberish,
      _entryFee: BigNumberish,
      _serviceFeePercent: BigNumberish,
      _autoStartDelay: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "currentGame"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultAutoStartDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultCommitDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultEntryFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultMaxPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultMinPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultRevealDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultServiceFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameExists"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllGames"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentGameContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDefaults"
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGamesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurrentGame"
  ): TypedContractMethod<[_game: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultParameters"
  ): TypedContractMethod<
    [
      _minPlayers: BigNumberish,
      _maxPlayers: BigNumberish,
      _commitDuration: BigNumberish,
      _revealDuration: BigNumberish,
      _entryFee: BigNumberish,
      _serviceFeePercent: BigNumberish,
      _autoStartDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDeployScript"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CurrentGameSet"
  ): TypedContractEvent<
    CurrentGameSetEvent.InputTuple,
    CurrentGameSetEvent.OutputTuple,
    CurrentGameSetEvent.OutputObject
  >;
  getEvent(
    key: "DefaultParametersUpdated"
  ): TypedContractEvent<
    DefaultParametersUpdatedEvent.InputTuple,
    DefaultParametersUpdatedEvent.OutputTuple,
    DefaultParametersUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CurrentGameSet(address)": TypedContractEvent<
      CurrentGameSetEvent.InputTuple,
      CurrentGameSetEvent.OutputTuple,
      CurrentGameSetEvent.OutputObject
    >;
    CurrentGameSet: TypedContractEvent<
      CurrentGameSetEvent.InputTuple,
      CurrentGameSetEvent.OutputTuple,
      CurrentGameSetEvent.OutputObject
    >;

    "DefaultParametersUpdated()": TypedContractEvent<
      DefaultParametersUpdatedEvent.InputTuple,
      DefaultParametersUpdatedEvent.OutputTuple,
      DefaultParametersUpdatedEvent.OutputObject
    >;
    DefaultParametersUpdated: TypedContractEvent<
      DefaultParametersUpdatedEvent.InputTuple,
      DefaultParametersUpdatedEvent.OutputTuple,
      DefaultParametersUpdatedEvent.OutputObject
    >;

    "GameCreated(address,uint256)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
